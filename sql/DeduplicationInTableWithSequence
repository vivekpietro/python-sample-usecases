-- JOB - Deduplicate data based on client_id, product_id and interest_rate for each agrmnt_id

-- Sample Dataset
+---+---------+--------------+------------+---------+----------+-------------+
|sk |agrmnt_id|actual_from_dt|actual_to_dt|client_id|product_id|interest_rate|
+---+---------+--------------+------------+---------+----------+-------------+
|1  |101      |2015-01-01    |2015-02-20  |20       |305       |3.50%        |
|2  |101      |2015-02-21    |2015-05-17  |20       |345       |4%           |
|3  |101      |2015-05-18    |2015-07-05  |20       |345       |4%           |
|4  |101      |2015-07-06    |2015-08-22  |20       |539       |6%           |
|5  |101      |2015-08-23    |9999-12-31  |20       |345       |4%           |
|6  |102      |2016-01-01    |2016-06-30  |25       |333       |3.70%        |
|7  |102      |2016-07-01    |2016-07-25  |25       |333       |3.70%        |
|8  |102      |2016-07-26    |2016-09-15  |25       |333       |3.70%        |
|9  |102      |2016-09-16    |9999-12-31  |25       |560       |5.90%        |
|10 |103      |2011-05-22    |9999-12-31  |30       |560       |2%           |
+---+---------+--------------+------------+---------+----------+-------------+

-- SCRIPT LOGIC:
-- Starting with the subquery, we are applying row number function twice in order to identify the rows that have same
-- agrmnt_id, client_id, product_id, interest_rate but are not continuous (for the case of records having surrogate
-- key 3 & 5).
-- Then this rank value is used in group by and min(actual_from_dt) and max(actual_to_dt) values are picked
-- for the records where the duplicates are there and which needs to be compacted.
-- The final result set is ordered based on agrmnt_id and actual_from_dt for better readability.

-- TO RUN:
-- No changes required, can be run as is.

create table dim_dep_agreement_compacted as (
select
   min(sk) as sk,
   min(agrmnt_id) as agrmnt_id,
   min(actual_from_dt) as actual_from_dt,
   max(actual_to_dt) as actual_to_dt,
   min(client_id) as client_id,
   min(product_id) as product_id,
   min(interest_rate) as interest_rate
from
   (
      select
         *,
         row_number() over (
      order by
         agrmnt_id, actual_from_dt) - row_number() over (partition by agrmnt_id, client_id, product_id, interest_rate
      order by
         agrmnt_id, actual_from_dt ) as rank1
      from
         dim_dep_agreement
      order by
         sk
   )
group by
   rank1
order by
   agrmnt_id,
   actual_from_dt
    )
